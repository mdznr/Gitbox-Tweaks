//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class GBGitConfig, GBRef, GBStage, GitRepository, NSArray, NSData, NSError, NSMutableDictionary, NSString, NSURL, OABlockTable, OABlockTransaction;

__attribute__((visibility("hidden")))
@interface GBRepository : NSObject
{
    struct dispatch_queue_s *remoteDispatchQueue;
    NSURL *url;
    struct dispatch_queue_s *dispatchQueue;
    NSData *URLBookmarkData;
    NSURL *dotGitURL;
    NSArray *localBranches;
    NSArray *remotes;
    NSArray *tags;
    NSArray *_submodules;
    GitRepository *libgitRepository;
    GBStage *stage;
    GBRef *currentLocalRef;
    GBRef *currentRemoteBranch;
    NSArray *localBranchCommits;
    NSError *lastError;
    OABlockTable *blockTable;
    OABlockTransaction *blockTransaction;
    GBGitConfig *config;
    unsigned long long unmergedCommitsCount;
    unsigned long long unpushedCommitsCount;
    unsigned long long commitsDiffCount;
    NSMutableDictionary *tagsByCommitID;
    double currentTaskProgress;
    NSString *currentTaskProgressStatus;
    BOOL authenticationFailed;
    BOOL authenticationCancelledByUser;
}

+ (id)URLFromBookmarkData:(id)arg1;
+ (void)initRepositoryAtURL:(id)arg1;
+ (BOOL)validateRepositoryURL:(id)arg1;
+ (BOOL)validateRepositoryURL:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
+ (BOOL)isAtLeastOneValidRepositoryOrFolderURL:(id)arg1;
+ (BOOL)isValidRepositoryOrFolderURL:(id)arg1;
+ (BOOL)isValidRepositoryPath:(id)arg1;
+ (BOOL)isSupportedGitVersion:(id)arg1;
+ (id)gitVersionForLaunchPath:(id)arg1;
+ (id)gitVersion;
+ (id)supportedGitVersion;
+ (id)repositoryWithURL:(id)arg1;
@property(nonatomic, getter=isAuthenticationCancelledByUser) BOOL authenticationCancelledByUser; // @synthesize authenticationCancelledByUser;
@property(nonatomic, getter=isAuthenticationFailed) BOOL authenticationFailed; // @synthesize authenticationFailed;
@property(copy, nonatomic) NSString *currentTaskProgressStatus; // @synthesize currentTaskProgressStatus;
@property(nonatomic) double currentTaskProgress; // @synthesize currentTaskProgress;
@property(retain, nonatomic) NSMutableDictionary *tagsByCommitID; // @synthesize tagsByCommitID;
@property(nonatomic) unsigned long long commitsDiffCount; // @synthesize commitsDiffCount;
@property(nonatomic) unsigned long long unpushedCommitsCount; // @synthesize unpushedCommitsCount;
@property(nonatomic) unsigned long long unmergedCommitsCount; // @synthesize unmergedCommitsCount;
@property(retain, nonatomic) GBGitConfig *config; // @synthesize config;
@property(retain, nonatomic) OABlockTransaction *blockTransaction; // @synthesize blockTransaction;
@property(retain, nonatomic) OABlockTable *blockTable; // @synthesize blockTable;
@property(retain, nonatomic) NSError *lastError; // @synthesize lastError;
@property(retain, nonatomic) NSArray *localBranchCommits; // @synthesize localBranchCommits;
@property(retain, nonatomic) GBRef *currentRemoteBranch; // @synthesize currentRemoteBranch;
@property(retain, nonatomic) GBRef *currentLocalRef; // @synthesize currentLocalRef;
@property(retain, nonatomic) GBStage *stage; // @synthesize stage;
@property(retain, nonatomic) GitRepository *libgitRepository; // @synthesize libgitRepository;
@property(retain, nonatomic) NSArray *submodules; // @synthesize submodules=_submodules;
@property(retain, nonatomic) NSArray *remotes; // @synthesize remotes;
@property(retain, nonatomic) NSArray *localBranches; // @synthesize localBranches;
@property(retain, nonatomic) NSURL *dotGitURL; // @synthesize dotGitURL;
@property(retain, nonatomic) NSData *URLBookmarkData; // @synthesize URLBookmarkData;
@property(nonatomic) struct dispatch_queue_s *dispatchQueue; // @synthesize dispatchQueue;
@property(retain, nonatomic) NSURL *url; // @synthesize url;
- (id)errorWithCode:(int)arg1 description:(id)arg2 reason:(id)arg3 suggestion:(id)arg4;
- (id)gitURLWithSuffix:(id)arg1;
- (id)launchTaskAndWait:(id)arg1;
- (void)launchRemoteTask:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)launchTask:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (id)authenticatedTaskWithAddress:(id)arg1;
- (id)taskWithProgress;
- (id)task;
- (void)removeRemoteRefs:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)removeRefs:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)removeStashes:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)applyStash:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)stashChangesWithMessage:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)doGitCommand:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)resetSubmodule:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)revertCommit:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)resetMixedToCommit:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)resetSoftToCommit:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)resetToCommit:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)resetStageWithBlock:(CDUnknownBlockType)arg1;
- (void)rebaseContinueWithBlock:(CDUnknownBlockType)arg1;
- (void)rebaseSkipWithBlock:(CDUnknownBlockType)arg1;
- (void)rebaseCancelWithBlock:(CDUnknownBlockType)arg1;
- (void)rebaseWithBlock:(CDUnknownBlockType)arg1;
- (void)pushBranch:(id)arg1 toRemoteBranch:(id)arg2 forced:(BOOL)arg3 withBlock:(CDUnknownBlockType)arg4;
- (void)pushWithForce:(BOOL)arg1 block:(CDUnknownBlockType)arg2;
- (void)fetchBranch:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)fetchRemote:(id)arg1 silently:(BOOL)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)pullBranch:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)cherryPickCommit:(id)arg1 creatingCommit:(BOOL)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)cherryPickCommitId:(id)arg1 creatingCommit:(BOOL)arg2 message:(id)arg3 withBlock:(CDUnknownBlockType)arg4;
- (void)mergeCommitish:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)mergeBranch:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)pullOrMergeWithBlock:(CDUnknownBlockType)arg1;
- (void)fetchCurrentBranchWithBlock:(CDUnknownBlockType)arg1;
- (void)alertDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)alertWithMessage:(id)arg1 gitOutput:(id)arg2;
- (void)alertWithMessage:(id)arg1 description:(id)arg2;
- (void)commitWithMessage:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)createTagWithName:(id)arg1 commitId:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)checkoutNewBranchWithName:(id)arg1 commit:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)checkoutRef:(id)arg1 withNewName:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)checkoutRef:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)configureTrackingRemoteBranch:(id)arg1 withLocalName:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)updateSubmodulesWithBlock:(CDUnknownBlockType)arg1;
- (void)initSubmodulesWithBlock:(CDUnknownBlockType)arg1;
- (void)updateCommitsDiffCountWithBlock:(CDUnknownBlockType)arg1;
- (void)updateUnpushedCommitsWithBlock:(CDUnknownBlockType)arg1;
- (void)updateUnmergedCommitsWithBlock:(CDUnknownBlockType)arg1;
- (void)updateLocalBranchCommitsWithBlock:(CDUnknownBlockType)arg1;
- (void)updateCurrentLocalRefWithBlock:(CDUnknownBlockType)arg1;
- (void)loadLocalRefsWithBlock:(CDUnknownBlockType)arg1;
- (void)updateRemotesWithBlock:(CDUnknownBlockType)arg1;
- (void)updateRemotesIfNeededWithBlock:(CDUnknownBlockType)arg1;
- (void)updateLocalRefsWithBlock:(CDUnknownBlockType)arg1;
- (void)updateConfiguredRemoteBranchWithBlock:(CDUnknownBlockType)arg1;
- (id)URLForRelativePath:(id)arg1;
- (id)firstRemote;
- (void)loadStashesWithBlock:(CDUnknownBlockType)arg1;
- (id)URLForSubmoduleAtPath:(id)arg1;
- (BOOL)doesHaveSubmodules;
- (BOOL)doesRefExist:(id)arg1;
- (id)existingRefForRef:(id)arg1;
- (id)remoteForAlias:(id)arg1;
- (id)commits;
- (id)stageAndCommits;
@property(readonly, nonatomic) NSString *path; // @dynamic path;
- (id)tagsForCommit:(id)arg1;
- (id)tagForCommit:(id)arg1;
- (id)description;
- (unsigned long long)totalPendingChanges;
- (id)remoteBranches;
@property(retain, nonatomic) NSArray *tags; // @synthesize tags;
- (id)init;
- (void)dealloc;

@end

